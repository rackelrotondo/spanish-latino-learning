// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  VOCABULARY
  GRAMMAR
  CULTURE
  LISTENING
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Campos específicos da aplicação
  xpPoints      Int       @default(0) @map("xp_points")
  currentStreak Int       @default(0) @map("current_streak")
  longestStreak Int       @default(0) @map("longest_streak")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relacionamentos
  progress         UserProgress[]
  achievements     UserBadge[]
  countryProgress  UserCountryProgress[]

  @@map("users")
}

model Country {
  code                String  @id
  name                String
  nameSpanish         String  @map("name_spanish")
  capital             String
  population          String
  flagUrl             String  @map("flag_url")
  requiredXP          Int?    @map("required_xp")
  difficulty          Difficulty
  culturalComplexity  Int     @map("cultural_complexity")
  linguisticVariation Int     @map("linguistic_variation")
  svgPath             String  @map("svg_path")
  positionX           Int?    @map("position_x")
  positionY           Int?    @map("position_y")
  culturalData        String? @map("cultural_data") // JSON
  languageData        String? @map("language_data") // JSON
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  progress            UserProgress[]
  achievements        UserBadge[]
  lessons             Lesson[]

  @@map("countries")
}

model Lesson {
  id              String      @id
  countryCode     String      @map("country_code")
  title           String
  type            LessonType
  difficulty      Difficulty
  estimatedTime   Int         @map("estimated_time")
  xpReward        Int         @map("xp_reward")
  orderIndex      Int         @map("order_index")
  culturalIntro   String?     @map("cultural_intro") // JSON
  questions       String?     // JSON
  isPublished     Boolean     @default(false) @map("is_published")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relacionamentos
  country         Country     @relation(fields: [countryCode], references: [code])
  progress        UserProgress[]

  @@map("lessons")
}

model UserProgress {
  id              String      @id @default(cuid())
  userId          String      @map("user_id")
  countryCode     String      @map("country_code")
  lessonId        String      @map("lesson_id")
  completed       Boolean     @default(false)
  score           Int?
  timeSpent       Int?        @map("time_spent") // em segundos
  completedAt     DateTime?   @map("completed_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relacionamentos
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  country         Country     @relation(fields: [countryCode], references: [code])
  lesson          Lesson      @relation(fields: [lessonId], references: [id])

  @@unique([userId, countryCode, lessonId])
  @@map("user_progress")
}

model UserBadge {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  badgeId     String   @map("badge_id")
  earnedAt    DateTime @default(now()) @map("earned_at")
  countryCode String?  @map("country_code")

  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge       Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  country     Country? @relation(fields: [countryCode], references: [code])

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Badge {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String
  icon           String
  conditionType  String?   @map("condition_type")
  conditionValue String?   @map("condition_value") // JSON
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relacionamentos
  userBadges     UserBadge[]

  @@map("badges")
}

model UserCountryProgress {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  countryCode String   @map("country_code")
  totalXP     Int      @default(0) @map("total_xp")
  lessonsCompleted Int @default(0) @map("lessons_completed")
  lastAccessed DateTime? @map("last_accessed")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, countryCode])
  @@map("user_country_progress")
}
